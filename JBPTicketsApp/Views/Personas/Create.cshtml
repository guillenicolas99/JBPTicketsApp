@model JBPTicketsApp.Models.ViewModels.RegistrarPersonaViewModel

@{
    ViewData["Title"] = "Agregar Discípulo";
}

<form asp-action="Create" class="card shadow-lg">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="card-body row align-items-end">
        <div class="col-md-3 mb-3">
            Nombre:
            <input class="form-control" id="nombre" />
        </div>
        <div class="col-md-3 mb-3">
            Red:
            <select class="form-select" asp-items="ViewBag.IdRed" id="red" >
                <option selected disabled value="">Seleccione una red</option>
            </select>
        </div>
        <div class="col-md-3 mb-3">
            Título:
            <select class="form-select" asp-items="ViewBag.IdNivelLiderazgo" id="titulo">
                <option selected disabled value="">Seleccione el nivel de liderazgo</option>
            </select>
        </div>
        <div class="col-md-3 mb-3">
            <button type="button" id="btn-lista" class="btn btn-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
            </button>
        </div>
        <span class="alert alert-danger error-message d-none">Seleccione un valores</span>
        @if (ViewBag.message != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @ViewBag.message
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
    </div>

    <div class="card-body">
        <table class="table table-hover table-striped table-light">
            <thead>
                <tr>
                    <td>#</td>
                    <td>Nombre</td>
                    <td>Red</td>
                    <td>Nivel de Liderazgo</td>
                </tr>
            </thead>
            <tbody class="tbody"></tbody>
        </table>
    </div>
    <button class="btn btn-success btn-submit" type="submit">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-device-floppy"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M6 4h10l4 4v10a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2" /><path d="M12 14m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M14 4l0 4l-6 0l0 -4" /></svg>
        Guardar
    </button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script>
    const btnListarPersona = document.getElementById("btn-lista");
    const btnSubmit = document.querySelector('.btn-submit');
    const tBodyEl = document.querySelector('.tbody');
    const errMessage = document.querySelector('.error-message');
    let num = 0;

    btnSubmit.classList.add('disabled');

    function clearForm() {
        document.getElementById("nombre").value = "";
        document.getElementById("red").value = "";
        document.getElementById("titulo").value = "";
    }

    function createHiddenInput(name, value) {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = "hidden";
        hiddenInput.name = name;
        hiddenInput.value = value;
        return hiddenInput;
    }

    function addPersonaRow(index, nombre, redText, tituloText) {
        const row = `
                <tr>
                    <td>${index}</td>
                    <td>${nombre}</td>
                    <td>${redText}</td>
                    <td>${tituloText}</td>
                </tr>
            `;
        tBodyEl.insertAdjacentHTML('beforeend', row);
    }

    function addHiddenFields(num, nombre, titulo, red) {
        const hiddenFields = [
            createHiddenInput("Persona.index", num),
            createHiddenInput(`Persona[${num}].Nombre`, nombre),
            createHiddenInput(`Persona[${num}].IdTitulo`, titulo),
            createHiddenInput(`Persona[${num}].IdRed`, red)
        ];

        hiddenFields.forEach(field => tBodyEl.appendChild(field));
    }

    btnListarPersona.addEventListener('click', () => {
        const nombreEl = document.getElementById("nombre");
        const redEl = document.getElementById("red");
        const tituloEl = document.getElementById("titulo");

        if (!nombreEl.value || !redEl.value || !tituloEl.value) {
            errMessage.classList.remove('d-none');
            return;
        }
        errMessage.classList.add('d-none');

        addPersonaRow(num + 1, nombreEl.value, redEl.options[redEl.selectedIndex].text, tituloEl.options[tituloEl.selectedIndex].text);
        addHiddenFields(num, nombreEl.value, tituloEl.value, redEl.value);

        clearForm();
        num++;
        if (num > 0) {
            btnSubmit.classList.remove('disabled');
        }
    });
</script>
